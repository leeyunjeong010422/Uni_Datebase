import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Scanner;

/*
	jdbc작성방법
		1.jdbc드라이버 로드   
		2.DB연결
		3.DB에 데이터를 읽거나 씀
		4.DB연결해제
 * */

public class DBConn {

	static Scanner sc = new Scanner(System.in);
	static Connection conn = null;
	static Statement stmt = null; // 객체 선언 (생성X)
	static ResultSet rs = null;
	static String strArgs[] = new String[4]; //배열 객체가 생성이 될 때 갯수를 써주면 됨

	public static void main(String[] args) {
		
		System.out.println("원하는 쿼리를 선택하세요: 1.select | 2.insert | 0.exit");

		int sel = sc.nextInt();

		try {
			


			try {
				
				// 1.jdbc드라이버 로드 -> jdbc 드라이버릐 클래스 이름 : oracle.jdbc.driver.OracleDriver
				Class.forName("oracle.jdbc.driver.OracleDriver");

				// 2.DB연결 -> url : jdbc:oracle:thin:@localhost:1521:xe
				conn = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe", "system", "601");

				// 3.DB에 데이터를 읽거나 쓴다: select, insert, update, delete
				System.out.println("DB접속성공!");
				stmt = conn.createStatement();

			} catch (ClassNotFoundException e) {
				e.printStackTrace();
				// TODO: handle exception
			} catch (SQLException e) {
				e.printStackTrace();
			}

			switch (sel) {
			case 1:
				sqlSelect();
				break;
			case 2:
				sqlInsert();

			case 0:
				System.out.println("sql쿼리 종료");
				System.exit(0);
				break;
			default:
				break;
			}
		} finally {
			try {
				stmt.close();
			} catch (Exception e) {

			}
		}
	}
	public static void sqlSelect() { // static이 붙어져 있는 메소드는 static이 붙어져있는 것만 받을 수 있음
		try {

			rs = stmt.executeQuery("select code, name, price, maker from goodsinfo"); // select name, price from goodsinfo; 는 sql에서 쓰고 오라클은 ;을 빼고 씀
																			

		} catch (SQLException e) {
			e.printStackTrace();
		}

		System.out.println("CODE     NAME     PRICE     MAKER");
		System.out.println("==================================");

//             	2) ExecuteQuery() 메소드 호출
//             	3) next() 메소드 호출
//             	4) getInt(), getString() getFloat() 메소드를 호출하여 특정 컬럼의 값을 가져옴
//             	   While(re.next()) {
//             	   		String code = rs.getString("code");
//             	   		...
//             	   		int price = rs.getInt("price");
//             	   }

		try {
			while (rs.next()) {
				String code = rs.getString(1);
				String name = rs.getString(2);
				int price = rs.getInt(3);
				String maker = rs.getString(4);
				System.out.println(code + "   " + name + "   " + price + "      " + maker);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}

	}
	
	public static void sqlInsert() {
		// executeUpdate()메소드 호출: 데이터 삽입, 수정, 삭제
		
		System.out.println("경고: 입력데이터는 상품코드, 상품명, 가격, 제조사 순으로 입력하시오");
		
		strArgs[0] = sc.next();
		strArgs[1] = sc.next();
		strArgs[2] = sc.next();
		strArgs[3] = sc.next();
		
		try {
			int rowNum = stmt.executeUpdate("insert into goodsinfo" 
												+ "(code, name, price, maker)"
												+ "values ('" + strArgs[0] + "','"
												+ strArgs[1] + "', "
												+ strArgs[2] + ", '"
												+ strArgs[3] + "')");
			System.out.println(rowNum + "행이 추가 되었습니다.");
			sqlSelect();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

}
