Zapangi



import java.util.Scanner;

public class Zapangi {

	static Changer biz;
	Selector order;
	Scanner sc;
	
	public Zapangi() {
		sc = new Scanner(System.in);
	}
	
	public void show() {
		System.out.println("자판기입니다.");
		System.out.println("-------------------------------------------------");
		System.out.println("1. 콜라(600)  2. 환타(550)  3. 커피(370)  4. 생수(420)");
		System.out.println("-------------------------------------------------");
		System.out.println();
		biz.doBusiness();
	}
	
	void selectDrink(int money) {
		int sel;
		System.out.println("음료수를 선택하세요 : ");
		sel = (int)(sc.next().charAt(0)) - 48;
		
		if (sel < 1 || sel > 4) {
			System.out.println("음료수 선택 오류");
			selectDrink(sel);
			biz.placeOrder(order);
			biz.checkM(money, order);
		}
	}
}


+++++++++++++++++++++
ZapangiMain


public class ZapangiMain {

	public static void main(String[] args) {
		Zapangi z = new Zapangi();
		z.show();
	}
}



+++++++++++++++++++++
Changer



import java.util.Scanner;

public class Changer {

	static Scanner sc;
	static int money = 0;
	static int t_money = 0;
	static Zapangi za;
	static Dao db;
	
	public Changer() {
		sc = new Scanner(System.in);
		za = new Zapangi();
		db = new Dao();
		db.opCoins();
	}
	
	static void doBusiness() {
		while (true) {
			if (money == 0) {
				inputCoin();
			}
			
			za.selectDrink(money);
			System.out.println("추가 선택 하시겠습니까?(y/n)");
			char exit = sc.next().charAt(0);
			if (exit == 'y' || exit == 'Y') {
				za.selectDrink(money);
			} else if (exit == 'n' || exit == 'N') {
				System.out.println("Exit Choose Drink");
				break;
			}
			money = t_money;
			System.out.println("현재 잔액(doBusiness) : " + money + ", t_money : " + t_money);
		}
	}
	
	static void placeOrder(Selector order) {
		System.out.println(order);
		System.out.println(order.getName() + "을 주문하셨습니다. 주문 금액은 " + order.getPrice() + "입니다.");
		db.addOrder(order);
	}
	
	static void inputCoin() {
		System.out.println("금액을 입력하세요 : ");
		int s = sc.nextInt();
		money += s;
		t_money = money;
		System.out.println("현재 잔액(inputCoin) : " + money + ", t_money : " + t_money);
	}
	
	static void checkM(int money, Selector order) {
		char sel;
		if (money < order.getPrice()) {
			System.out.println("음료수가 더 비싸요....");
			System.out.println("금액을 더 넣으시겠습니까? (y/n)");
			sel = sc.next().charAt(0);
			
			if (sel == 'y') {
				inputCoin();
				money = t_money;
				za.selectDrink(money);
			} else if (sel == 'n') {
				System.out.println("자판기 종료");
				changePay(money, order);
				System.exit(0);
			}
		} else {
			doBusiness();
			changePay(money, order);
		}
	}
	
	static void changePay(int money, Selector order) {
		int change = money - order.getPrice();
		
		db.account(money, change);
		
		System.out.println();
		System.out.println("-------------------------");
		System.out.println("뽑으신 음료수는 " + order.getName() + "이며 거스름돈은 " + change + "원 입니다.");
		System.out.print("10000원 : " + db.coins[0] + ", ");
		System.out.print("5000원 : " + db.coins[1] + ", ");
		System.out.print("1000원 : " + db.coins[2] + ", ");
		System.out.print("500원 : " + db.coins[3] + ", ");
		System.out.print("100원 : " + db.coins[4] + ", ");
		System.out.print("50원 : " + db.coins[5] + ", ");
		System.out.println("10원 : " + db.coins[6]);
		System.out.println("-------------------------");
		System.out.println();
		t_money = change;
		System.out.println("현재 잔액(changePay) : " + change + ", t_money : " + t_money);
	}
	
}


+++++++++++++++++++++
Selector


public class Selector {

	private String name = "";
	private int price = 0;
	
	public Selector(int sel) {

		switch (sel) {
		case 1:
			this.name = "콜라";
			this.price = 600;
			break;
		case 2:
			this.name = "환타";
			this.price = 550;
			break;
		case 3:
			this.name = "커피";
			this.price = 370;
			break;
		case 4:
			this.name = "생수";
			this.price = 420;
			break;
		default:
			break;
		}
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public int getPrice() {
		return price;
	}

	public void setPrice(int price) {
		this.price = price;
	}
	
	
}


+++++++++++++++++++++

Dao



import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class Dao {

	int[] dstocks = {50, 35, 65, 40};
	int[] coins;
	int[] drinkSale = new int[4];
	int[] opCoin = {50, 50, 50, 50, 50, 50, 50};
	String[] coinName = {"m_10000", "m_5000", "m_1000", "m_500", "m_100", "m_50", "m_10"};
	String[] pName = {"콜라", "환타", "커피", "생수"};
	int[] cnm = {};
	int stock =0, price = 0, dstock = 50;
	static int total = 0;
	String name;
	
	public void addOrder(Selector order) {
		System.out.println("주문을 DB에 저장합니다");
		calCoins(order.getPrice());
		
		switch (order.getName()) {
		case "콜라":
			name = order.getName();
			stock = dstocks[0];
			price = order.getPrice();
			break;
		case "환타":
			name = order.getName();
			stock = dstocks[1];
			price = order.getPrice();
			break;
		case "커피":
			name = order.getName();
			stock = dstocks[2];
			price = order.getPrice();
			break;
		case "생수":
			name = order.getName();
			stock = dstocks[3];
			price = order.getPrice();
			break;
		default:
			break;
		}
		
		calCoins(order.getPrice());
		
		Connection conn = null;
		PreparedStatement pstmt = null;
		String sql = "";
		try {
			Class.forName("com.sql.cj.jdbc.Driver");
			conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/vending", "root", "mysql");
			conn.setAutoCommit(false);
			
			sql = "insert int drink (name, price, m_10000, m_5000, m_1000, m_500, m_100, m_50, m_10, date) "
					+ "values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?);";
			
			pstmt = conn.prepareStatement(sql);
			
			pstmt.setString(1, order.getName());
			pstmt.setInt(2, order.getPrice());
			pstmt.setInt(3, coins[0]);
			pstmt.setInt(4, coins[1]);
			pstmt.setInt(5, coins[2]);
			pstmt.setInt(6, coins[3]);
			pstmt.setInt(7, coins[4]);
			pstmt.setInt(8, coins[5]);
			pstmt.setInt(9, coins[6]);
			pstmt.setDate(10, getCurrentJavaSqlDate());
		} catch (ClassNotFoundException e) {
			System.out.println("해당 클래스를 찾을 수 없습니다" + e.getMessage());
		} catch (SQLException e) {
			System.out.println(e.getMessage());
		} finally {
			try {
				pstmt.close();
			} catch (Exception ignored) {
				
			}
			try {
				conn.close();
			} catch (Exception ignored) {
				
			}
		}
		totals();
		System.out.println("주문을 DB에 저장하였습니다.");
	}
	
	private static java.sql.Date getCurrentJavaSqlDate() {
		java.util.Date today = new java.util.Date();
		return new java.sql.Date(today.getTime());
	}
	
	public void totals() {
		cnm = new int[7];
		
		for (int i = 0; i < cnm.length; i++) {
			String s = coinName[i];
			cnm[i] = salesSum(s);
			System.out.println(s + " 화폐단위 토탈 확인 : " + cnm[i]);
		}
		
		Connection conn = null;
		PreparedStatement pstmt = null;
		String sql = "", sqla = "";
		try {
			Class.forName("com.sql.cj.jdbc.Driver");
			conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/vending", "root", "mysql");
			
			sqla = "truncate t_sales";
			pstmt = conn.prepareStatement(sqla);
			pstmt.executeUpdate();
			//pstmt.close();
			
			sql = "insert int drink (m_10000, m_5000, m_1000, m_500, m_100, m_50, m_10) "
					+ "values (?, ?, ?, ?, ?, ?, ?);";

			pstmt = conn.prepareStatement(sql);
			
			
			pstmt.setInt(1, cnm[0]);
			pstmt.setInt(2, cnm[1]);
			pstmt.setInt(3, cnm[2]);
			pstmt.setInt(4, cnm[3]);
			pstmt.setInt(5, cnm[4]);
			pstmt.setInt(6, cnm[5]);
			pstmt.setInt(7, cnm[6]);
			
			pstmt.executeUpdate();
			
		} catch (ClassNotFoundException e) {
			System.out.println("해당 클래스를 찾을 수 없습니다" + e.getMessage());
		} catch (SQLException e) {
			System.out.println(e.getMessage());
		} finally {
			try {
				pstmt.close();
			} catch (Exception ignored) {
				
			}
			try {
				conn.close();
			} catch (Exception ignored) {
				
			}
		}
	}
	
	public int salesSum(String cn) {
		Connection conn = null;
		PreparedStatement pstmt = null;
		String sql = "";
		int value = 0;
		
		try {
			Class.forName("com.sql.cj.jdbc.Driver");
			conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/vending", "root", "mysql");
			
			sql = "select sum(" + cn + ") from drink";
			
			pstmt = conn.prepareStatement(sql);
			ResultSet result = pstmt.executeQuery();
			result.next();
			String sum = result.getString(1);
			value = Integer.parseInt(sum);
			
		} catch (ClassNotFoundException e) {
			System.out.println("해당 클래스를 찾을 수 없습니다" + e.getMessage());
		} catch (SQLException e) {
			System.out.println(e.getMessage());
		} finally {
			try {
				pstmt.close();
			} catch (Exception ignored) {
				
			}
			try {
				conn.close();
			} catch (Exception ignored) {
				
			}
		}
		return value;
	}
	
	public void opCoins() {
		
		Connection conn = null;
		PreparedStatement pstmt = null;
		String sql = "", sqla = "";
		
		try {
			Class.forName("com.sql.cj.jdbc.Driver");
			conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/vending", "root", "mysql");
			
			sqla = "truncate t_sales";
			pstmt = conn.prepareStatement(sqla);
			pstmt.executeUpdate();
			//pstmt.close();
			
			sql = "insert int drink (m_10000, m_5000, m_1000, m_500, m_100, m_50, m_10) "
					+ "values (?, ?, ?, ?, ?, ?, ?);";

			pstmt = conn.prepareStatement(sql);
			
			
			pstmt.setInt(1, opCoin[0]);
			pstmt.setInt(2, opCoin[1]);
			pstmt.setInt(3, opCoin[2]);
			pstmt.setInt(4, opCoin[3]);
			pstmt.setInt(5, opCoin[4]);
			pstmt.setInt(6, opCoin[5]);
			pstmt.setInt(7, opCoin[6]);
			
			pstmt.executeUpdate();
			
		} catch (ClassNotFoundException e) {
			System.out.println("해당 클래스를 찾을 수 없습니다" + e.getMessage());
		} catch (SQLException e) {
			System.out.println(e.getMessage());
		} finally {
			try {
				pstmt.close();
			} catch (Exception ignored) {
				
			}
			try {
				conn.close();
			} catch (Exception ignored) {
				
			}
		}
	}
	
	public void account(int money, int change) {
		int[] coinAct = new int[7];
		int a, b, c, d, e, f, g;
		calCoins(money);
		
		a = opCoin[0] + coins[0];
		b = opCoin[1] + coins[1];
		c = opCoin[2] + coins[2];
		d = opCoin[3] + coins[3];
		e = opCoin[4] + coins[4];
		f = opCoin[5] + coins[5];
		g = opCoin[6] + coins[6];
		
		calCoins(change);
		coinAct[0] = a - coins[0];
		coinAct[1] = a - coins[1];
		coinAct[2] = a - coins[2];
		coinAct[3] = a - coins[3];
		coinAct[4] = a - coins[4];
		coinAct[5] = a - coins[5];
		coinAct[6] = a - coins[6];
		
		Connection conn = null;
		PreparedStatement pstmt = null;
		String sql = "", sqla = "";
		
		try {
			Class.forName("com.sql.cj.jdbc.Driver");
			conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/vending", "root", "mysql");
			
			sqla = "truncate t_sales";
			pstmt = conn.prepareStatement(sqla);
			pstmt.executeUpdate();
			//pstmt.close();
			
			sql = "insert int drink (m_10000, m_5000, m_1000, m_500, m_100, m_50, m_10) "
					+ "values (?, ?, ?, ?, ?, ?, ?);";

			pstmt = conn.prepareStatement(sql);
			
			
			pstmt.setInt(1, coinAct[0]);
			pstmt.setInt(2, coinAct[1]);
			pstmt.setInt(3, coinAct[2]);
			pstmt.setInt(4, coinAct[3]);
			pstmt.setInt(5, coinAct[4]);
			pstmt.setInt(6, coinAct[5]);
			pstmt.setInt(7, coinAct[6]);
			
			pstmt.executeUpdate();
			
		} catch (ClassNotFoundException cnfe) {
			System.out.println("해당 클래스를 찾을 수 없습니다" + cnfe.getMessage());
		} catch (SQLException se) {
			System.out.println(se.getMessage());
		} finally {
			try {
				pstmt.close();
			} catch (Exception ignored) {
				
			}
			try {
				conn.close();
			} catch (Exception ignored) {
				
			}
		}
	}
	
	public void checkAct() {
		Connection conn = null;
		PreparedStatement pstmt = null;
		String sql = "";
		int value = 0;
		
		try {
			for (int i = 0; i < 4; i++) {
				Class.forName("com.sql.cj.jdbc.Driver");
				conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/vending", "root", "mysql");
				
				conn.setAutoCommit(false);
				sql = "select count(*) from drink where name = " + pName[i];
				
				pstmt = conn.prepareStatement(sql);
				conn.commit();
				
				ResultSet result = pstmt.executeQuery();
				
				result.next();
				String sum = result.getString(1);
				value = Integer.parseInt(sum);
				System.out.println(pName[i] + "판매개수 : " + value);
				
				switch (pName[i]) {
				case "'콜라'":
					drinkSale[0] += value;
					break;
				case "'환타'":
					drinkSale[1] += value;
					break;
				case "'커피'":
					drinkSale[2] += value;
					break;
				case "'생수'":
					drinkSale[3] += value;
					break;
				default:
					break;
				}
				
				if (value > 50) {
					conn.rollback();
					System.out.println("재고가 부족합니다. 관리자에게 문의 하세요");
				}
			}
		} catch (ClassNotFoundException cnfe) {
			System.out.println("해당 클래스를 찾을 수 없습니다" + cnfe.getMessage());
		} catch (SQLException se) {
			System.out.println(se.getMessage());
		} finally {
			try {
				pstmt.close();
			} catch (Exception ignored) {
				
			}
			try {
				conn.close();
			} catch (Exception ignored) {
				
			}
		}
		drinkSales();
		
		try {
			for (int i = 0; i < 4; i++) {
				
				conn.setAutoCommit(false);
				sql = "select " + coinName[i] + " from account;";
				
				pstmt = conn.prepareStatement(sql);
				conn.commit();
				
				ResultSet result = pstmt.executeQuery();
				
				result.next();
				String sum = result.getString(1);
				value = Integer.parseInt(sum);
				System.out.println(pName[i] + "재고 화폐단위 : " + value);
				
				if (value == 0) {
					conn.rollback();
					System.out.println(coinName[i] + "잔고가 부족합니다. 관리자에게 문의 하세요");
				}
			}
		} catch (SQLException se) {
			System.out.println(se.getMessage());
		} finally {
			try {
				pstmt.close();
			} catch (Exception ignored) {
				
			}
			try {
				conn.close();
			} catch (Exception ignored) {
				
			}
		}
	}
	
	public void drinkSales() {
		Connection conn = null;
		PreparedStatement pstmt = null;
		String sql = "", sqla = "";
		
		try {
			Class.forName("com.sql.cj.jdbc.Driver");
			conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/vending", "root", "mysql");
			
			sqla = "truncate t_sales";
			pstmt = conn.prepareStatement(sqla);
			pstmt.executeUpdate();
			//pstmt.close();
			
			sql = "insert int drinksale (COKE, FANTA, COFFEE, WATER) "
					+ "values (?, ?, ?, ?);";

			pstmt = conn.prepareStatement(sql);
			
			
			pstmt.setInt(1, drinkSale[0]);
			pstmt.setInt(2, drinkSale[1]);
			pstmt.setInt(3, drinkSale[2]);
			pstmt.setInt(4, drinkSale[3]);
			
			pstmt.executeUpdate();
			
		} catch (ClassNotFoundException e) {
			System.out.println("해당 클래스를 찾을 수 없습니다" + e.getMessage());
		} catch (SQLException e) {
			System.out.println(e.getMessage());
		} finally {
			try {
				pstmt.close();
			} catch (Exception ignored) {
				
			}
			try {
				conn.close();
			} catch (Exception ignored) {
				
			}
		}
	}
	
	public void calCoins(int amt) {
		coins = new int[7];
		int temp;
		
		coins[0] = amt / 10000;
		temp = amt % 10000;
		coins[1] = temp /5000;
		temp = temp % 5000;
		coins[2] = temp / 1000;
		temp = temp % 1000;
		coins[3] = temp /500;
		temp = temp % 500;
		coins[4] = temp /100;
		temp = temp % 100;
		coins[5] = temp /50;
		temp = temp % 50;
		coins[6] = temp /10;

	}
	
}
